[{"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\index.js":"1","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\App.js":"2","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\reportWebVitals.js":"3","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Layout.js":"4","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\VilleTable.js":"5","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\service\\callerService.js":"6","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\service\\accountService.js":"7","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Ville.js":"8","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Zone.js":"9","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\ZoneTable.js":"10","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\ZoneByVille.js":"11","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\RestaurantTable.js":"12","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\SerieTable.js":"13","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\SpecialiteTable.js":"14","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Serie.js":"15","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Specialite.js":"16","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Restaurant.js":"17","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\map.js":"18"},{"size":535,"mtime":1684001648000,"results":"19","hashOfConfig":"20"},{"size":1756,"mtime":1685152380288,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1684001648000,"results":"22","hashOfConfig":"20"},{"size":4673,"mtime":1685114781444,"results":"23","hashOfConfig":"20"},{"size":2012,"mtime":1685175025427,"results":"24","hashOfConfig":"20"},{"size":614,"mtime":1684001648000,"results":"25","hashOfConfig":"20"},{"size":735,"mtime":1684001648000,"results":"26","hashOfConfig":"20"},{"size":929,"mtime":1685149349407,"results":"27","hashOfConfig":"20"},{"size":2028,"mtime":1685137533655,"results":"28","hashOfConfig":"20"},{"size":4014,"mtime":1685175042931,"results":"29","hashOfConfig":"20"},{"size":1658,"mtime":1685129639039,"results":"30","hashOfConfig":"20"},{"size":16812,"mtime":1685175555907,"results":"31","hashOfConfig":"20"},{"size":2012,"mtime":1685175562477,"results":"32","hashOfConfig":"20"},{"size":2113,"mtime":1685175007010,"results":"33","hashOfConfig":"20"},{"size":1278,"mtime":1685151636179,"results":"34","hashOfConfig":"20"},{"size":1348,"mtime":1685148936857,"results":"35","hashOfConfig":"20"},{"size":10647,"mtime":1685151460013,"results":"36","hashOfConfig":"20"},{"size":2307,"mtime":1685152287349,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1z0nu08",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"41"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"41"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"41"},"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\index.js",[],[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\App.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\reportWebVitals.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Layout.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\VilleTable.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\service\\callerService.js",[],[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\service\\accountService.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Ville.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Zone.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\ZoneTable.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\ZoneByVille.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\RestaurantTable.js",["98","99","100","101"],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\SerieTable.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\SpecialiteTable.js",[],[],"C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Serie.js",["102"],[],"import { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Serie = () => {\n  const [name, setName] = useState(\"\");\n  const [serieId, setserieId] = useState(\"\");\n  const [series, setSeries] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    axios.get(\"/api/Series/all\").then((response) => {\n      setSeries(response.data);\n    });\n  }, []);\n\n  const handleSubmite = (event) => {\n    event.preventDefault();\n    axios\n      .post(\"/api/Series/save\", {\n        name,\n        Series: {\n          id: serieId\n        }\n      })\n      .then((response) => {\n        setName(\"\");\n        setserieId(\"\");\n        navigate(\"/Serie\");\n      });\n  };\n\n  return (\n    <div>\n      <h2>Liste des Series</h2>\n      <form onSubmit={handleSubmite}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Create\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Serie;\n","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Specialite.js",["103"],[],"import { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Specialite = () => {\n  const [name, setName] = useState(\"\");\n  const [specialiteId, setSpecialiteId] = useState(\"\");\n  const [specialites, setSpecialites] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    axios.get(\"/api/specialites/all\").then((response) => {\n      setSpecialites(response.data);\n    });\n  }, []);\n\n  const handleSubmite = (event) => {\n    event.preventDefault();\n    axios\n      .post(\"/api/specialites/save\", {\n        name,\n        specialites: {\n          id: specialiteId\n        }\n      })\n      .then((response) => {\n        setName(\"\");\n        setSpecialiteId(\"\");\n        navigate(\"/specialite\");\n      });\n  };\n\n  return (\n    <div>\n      <h2>Liste des specialites</h2>\n      <form onSubmit={handleSubmite}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Create\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Specialite;\n","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\Restaurant.js",["104"],[],"\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport axios from 'axios';\nimport React,{useState,useEffect,useReducer} from \"react\";\nimport RestaurantTable from \"../components/RestaurantTable\";\nimport { Card, CardContent } from '@mui/material';\n\n\n\nexport default function Restaurant() {\n    const [zones, setZones] = useState([]);\n    const [series, setSeries] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [zoneid, setZoneid] = useState(\"\");\n    const [serieid, setSerieid] = useState(\"\");\n    const [userid, setUserid] = useState(\"\");\n    const [nom, setNom] = useState(\"\");\n    const [longitude, setLongitude] = useState(\"\");\n    const [latitude, setLatitude] = useState(\"\");\n    const [dateOuverture, setdateopen] = useState(\"\");\n    const [dateFermeture, setdateclose] = useState(\"\");\n    const [adresse, setAdresse] = useState(\"\");\n    const [photo, setPhotos] = useState(\"\");\n    const [upTB, forceUpdate] = useReducer((x) => x + 1, 0);\n    const [tableKey, setTableKey] = useState(Date.now());\n\n\n\n\n    useEffect(() => {\n        axios.get(\"/api/users/\").then((response) => {\n            setUsers(response.data);\n        });\n        axios.get(\"/api/series/all\").then((response) => {\n            setSeries(response.data);\n        });\n        axios.get(\"/api/zones/all\").then((response) => {\n            setZones(response.data);\n        });\n    }, [upTB]);\n\n\n    const handleSubmit = (event) => {\n        console.log(\"photo\",photo);\n\n        event.preventDefault();\n        axios.post(\"/api/restaurants/save\", {\n            nom,\n            longitude,\n            latitude,\n            dateOuverture,\n            dateFermeture,\n            adresse,\n            photo,\n            user: {\n                id: userid\n            },\n            zone: {\n                id: zoneid\n            },\n            serie: {\n                id: serieid\n            }\n        }).then((response) => {\n            setNom(\"\");\n            setLatitude(\"\");\n            setLongitude(\"\");\n            setAdresse(\"\");\n            setdateclose(\"\");\n            setdateopen(\"\");\n            setPhotos(\"\");\n            setZoneid(\"\");\n            setSerieid(\"\");\n            setUserid(\"\");\n            forceUpdate();\n            setTableKey(Date.now());\n\n        });\n    };\n\n\n    const handlePhotoChange = (event) => {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            setPhotos(e.target.result);\n        };\n        reader.readAsDataURL(file);\n    };\n\n\n    return (\n\n        <Container component=\"main\" maxWidth=\"lg\">\n            <Card sx={{ marginTop: 3 }} >\n                <CardContent>\n                    <form onSubmit={handleSubmit}>\n                        <Box\n                            sx={{\n                                marginTop: 3,\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                            }}\n                        >\n\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Restaurant\n                            </Typography>\n                            <Box   sx={{ mt: 3 }}>\n                                <Grid container spacing={2}>\n\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"restaurant\"\n\n                                            autoComplete=\"restaurant\"\n                                            id=\"nom\"\n                                            value={nom}\n                                            onChange={(event) => setNom(event.target.value)}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"latitude\"\n\n                                            autoComplete=\"latitude\"\n                                            id=\"latitude\"\n                                            value={latitude}\n                                            onChange={(event) => setLatitude(event.target.value)}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"longitude\"\n\n                                            autoComplete=\"longitude\"\n                                            id=\"longitude\"\n                                            value={longitude}\n                                            onChange={(event) => setLongitude(event.target.value)}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"adresse\"\n\n                                            autoComplete=\"adresse\"\n                                            id=\"adresse\"\n                                            value={adresse}\n                                            onChange={(event) => setAdresse(event.target.value)}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"dateopen\"\n                                            type=\"datetime-local\"\n                                            autoComplete=\"dateopen\"\n                                            id=\"dateopen\"\n                                            value={dateOuverture}\n                                            onChange={(event) => setdateopen(event.target.value)}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n\n                                            label=\"dateclose\"\n                                            type=\"datetime-local\"\n                                            autoComplete=\"dateclose\"\n                                            id=\"dateclose\"\n                                            value={dateFermeture}\n                                            onChange={(event) => setdateclose(event.target.value)}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} sm={4}>\n                                        <TextField\n                                            required\n                                            fullWidth\n                                            type=\"file\" accept=\"image/*\" onChange={handlePhotoChange}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={4} >\n\n\n                                        <select\n                                            className=\"form-control\"\n                                            id=\"cityId\"\n                                            value={zoneid}\n                                            onChange={(event) => setZoneid(event.target.value)}\n                                        >\n                                            <option value=\"\">Select a zone </option>\n                                            {zones && zones.map((zone) => (\n                                                <option key={zone.id} value={zone.id}>\n                                                    {zone.nom}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={4} >\n\n\n                                        <select\n                                            className=\"form-control\"\n                                            id=\"serieid\"\n                                            value={serieid}\n                                            onChange={(event) => setSerieid(event.target.value)}\n                                        >\n                                            <option value=\"\">Select a serie </option>\n                                            {series && series.map((serie) => (\n                                                <option key={serie.id} value={serie.id}>\n                                                    {serie.nom}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    </Grid>\n\n\n                                </Grid>\n                                <Button\n                                    type=\"submit\"\n\n                                    sx={{ mt: 3, mb: 2 }}\n                                    variant=\"contained\"\n                                >\n                                    add\n                                </Button>\n\n\n                            </Box>\n                        </Box>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card sx={{ marginTop: 5 }}>\n                <CardContent>\n                    <RestaurantTable key={tableKey} />\n                </CardContent>\n            </Card>\n        </Container>\n\n\n    );\n}","C:\\Users\\hp\\AndroidStudioProjects\\Resto_Front\\src\\components\\map.js",["105","106","107"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Card } from \"antd\";\r\n\r\nconst customizeMap = {\r\n  width: \"50%\",\r\n  height: \"53%\",\r\n};\r\n\r\nconst infoContainerStyle = {\r\n  padding: \"16px\",\r\n};\r\n\r\nconst GoogleMapComponent = ({ google }) => {\r\n  const [coords, setCoords] = useState([]);\r\n  const [initialCenter, setInitialCenter] = useState({\r\n    lat: 31.6665735,\r\n    lng: -7.9754785,\r\n  });\r\n  const [restoInfo, setRestoInfo] = useState(null);\r\n\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`/api/restaurants/${id}`)\r\n      .then((response) => {\r\n        const data = response.data;\r\n\r\n        // Check if data has latitude and longitude properties\r\n        if (data.latitude && data.longitude) {\r\n          const coordinates = {\r\n            lat: data.longitude,\r\n            lng: data.latitude,\r\n          };\r\n          setCoords([coordinates]);\r\n          setInitialCenter(coordinates);\r\n\r\n        } else {\r\n          // Handle the case when data does not have the expected properties\r\n          console.error(\"Invalid data structure:\", data);\r\n        }\r\n\r\n        setRestoInfo(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n  }, [id]);\r\n\r\n  const drawMarker = () => {\r\n    return coords.map((coord, i) => {\r\n      const { lat, lng } = coord;\r\n\r\n      return (\r\n        <Marker\r\n          key={i}\r\n          id={i}\r\n          position={{\r\n            lat: lat,\r\n            lng: lng,\r\n          }}\r\n          onClick={() => console.log(\"Event Handler Called\")}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Restaurant Details</h1>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div style={{ marginLeft: 10, marginRight: 10, flex: 1 }}>\r\n          <Map\r\n            google={google}\r\n            style={customizeMap}\r\n            zoom={10}\r\n            initialCenter={initialCenter}\r\n          >\r\n            {drawMarker()}\r\n          </Map>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyCsA6hQ1C8D6IIeB_r2WDEEgPelvpUWIf8&amp;region=MA\",\r\n})(GoogleMapComponent);",{"ruleId":"108","severity":1,"message":"109","line":11,"column":16,"nodeType":"110","messageId":"111","endLine":11,"endColumn":25},{"ruleId":"108","severity":1,"message":"112","line":21,"column":12,"nodeType":"110","messageId":"111","endLine":21,"endColumn":17},{"ruleId":"108","severity":1,"message":"113","line":32,"column":12,"nodeType":"110","messageId":"111","endLine":32,"endColumn":26},{"ruleId":"108","severity":1,"message":"114","line":32,"column":28,"nodeType":"110","messageId":"111","endLine":32,"endColumn":45},{"ruleId":"108","severity":1,"message":"115","line":8,"column":10,"nodeType":"110","messageId":"111","endLine":8,"endColumn":16},{"ruleId":"108","severity":1,"message":"116","line":8,"column":10,"nodeType":"110","messageId":"111","endLine":8,"endColumn":21},{"ruleId":"108","severity":1,"message":"112","line":19,"column":12,"nodeType":"110","messageId":"111","endLine":19,"endColumn":17},{"ruleId":"108","severity":1,"message":"117","line":5,"column":10,"nodeType":"110","messageId":"111","endLine":5,"endColumn":14},{"ruleId":"108","severity":1,"message":"118","line":12,"column":7,"nodeType":"110","messageId":"111","endLine":12,"endColumn":25},{"ruleId":"108","severity":1,"message":"119","line":22,"column":10,"nodeType":"110","messageId":"111","endLine":22,"endColumn":19},"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'users' is assigned a value but never used.","'restaurantUser' is assigned a value but never used.","'setRestaurantUser' is assigned a value but never used.","'series' is assigned a value but never used.","'specialites' is assigned a value but never used.","'Card' is defined but never used.","'infoContainerStyle' is assigned a value but never used.","'restoInfo' is assigned a value but never used."]